stages:
  - test
  - image_build_version
  - image_test_version
  - image_update_latest

#=========================================
# BusyBox/Bash-only targets
#
# Tests performed on targets without git or
# HTTPS-enabled curl/wget. These are relevant
# tests for basic language checks against
# supported Bash versions.
#
# Tests:
# - YAML processing
# - Space install
#
#=========================================
bash32_base_tests:
  stage: test
  image: bash:3.2
  script:
    - which bash
    - bash --version
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

bash40_base_tests:
  stage: test
  image: bash:4.0
  script:
    - which bash
    - bash --version
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

# Commented out due to: `ERROR: Build failed: execution took longer than X seconds`
#bash44_base_tests:
#  stage: test
#  image: bash:4.4
#  script:
#    - which bash
#    - bash --version
#    - bash test/test_install.sh
#    - bash test/test_core.sh
#    - bash test/test_function.sh
#    - bash test/test_yaml.sh

bash50_base_tests:
  stage: test
  image: bash:5.0
  script:
    - which bash
    - bash --version
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

# Commented out due to: `ERROR: Build failed: execution took longer than X seconds`
#bashlatest_base_tests:
#  stage: test
#  image: bash:latest
#  script:
#    - which bash
#    - bash --version
#   - bash test/test_install.sh
#    - bash test/test_core.sh
#    - bash test/test_function.sh
#    - bash test/test_yaml.sh

#=========================================
# Full tests
#
#=========================================
alpine_26_test_all:
  stage: test
  image: alpine:2.6
  script:
    - apk add --update bash ca-certificates curl git
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - which busybox
    - bash --version
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

alpine_test_all:
  stage: test
  image: alpine:latest
  script:
    - apk add --update bash curl git
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - which busybox
    - bash --version
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

arch_test_all:
  stage: test
  image: archlinux:20191205
  script:
    - pacman -Sy --noconfirm diffutils glibc git which
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - bash --version
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

centos_test_all:
  stage: test
  image: centos:latest
  script:
    - yum -y update
    - yum -y install curl git which
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - bash --version
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

debianjessie_test_all:
  stage: test
  image: debian:jessie
  script:
    - apt-get update -qq
    - apt-get install -y -qq curl git
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

debianjessie_curl_test_all:
  stage: test
  image: debian:jessie
  script:
    - apt-get update -qq
    - apt-get install -y -qq curl
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

debianjessie_wget_test_all:
  stage: test
  image: debian:jessie
  script:
    - apt-get update -qq
    - apt-get install -y -qq wget
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

debianlatest_test_all:
  stage: test
  image: debian:latest
  script:
    - apt-get update -qq
    - apt-get install -y -qq curl git
    - mkdir ~/.ssh
    - printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
    - which bash
    - bash test/test_all_exit_status.sh
    - bash test/test_install.sh
    - bash test/test_core.sh
    - bash test/test_function.sh
    - bash test/test_yaml.sh

#=========================================
# Build
#
# Steps:
# - Build Docker image
# - Test image
# - Tag image as latest
#
#=========================================
image_build:
  stage: image_build_version
  image: docker:git
  services:
  - docker:dind
  script:
    - IMAGE_VERSION=$(grep "\_VERSION\=" space | cut -d'=' -f2 | cut -d"\"" -f2)
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build --build-arg VERSION=$IMAGE_VERSION -t $CI_REGISTRY_IMAGE:$IMAGE_VERSION -f ./build/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_VERSION
  only:
    - tags

image_test:
  stage: image_test_version
  image: docker:git
  services:
  - docker:dind
  script:
    - IMAGE_VERSION=$(grep "\_VERSION\=" space | cut -d'=' -f2 | cut -d"\"" -f2)
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_VERSION
    - sh test/test_build.sh
  only:
    - tags

image_release:
  stage: image_update_latest
  image: docker:git
  services:
  - docker:dind
  script:
    - IMAGE_VERSION=$(grep "\_VERSION\=" space | cut -d'=' -f2 | cut -d"\"" -f2)
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_VERSION
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker tag $CI_REGISTRY_IMAGE:$IMAGE_VERSION $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - tags



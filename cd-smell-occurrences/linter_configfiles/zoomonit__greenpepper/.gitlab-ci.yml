# Gitlab CI build for greenpepper

# Required Env vars
# - ENCRYPTION_PASSWORD
# - OSSRH_USER
# - OSSRH_PASS
# - GPG_PASSWORD

stages:
  # Prepare the environment, we will use the cache to make it cross builds
  - prepare
  # Build stage will only validate that the projects compiles
  - build
  # Test will launch every tests on the projects
  - test
  # deploy on repositories and the documentation
  - deploy

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Xmx1g -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DdeployAtEnd=true"

.setup: &setup
  before_script:
    - mkdir -p /home/gpbuilder/.gnupg  /home/gpbuilder/.m2
    - chmod og-xrw /home/gpbuilder/.gnupg
    - cp -a ./tools/settings.xml /home/gpbuilder/.m2/
    - echo $ENCRYPTION_PASSWORD | gpg --passphrase-fd 0 --batch --yes -o - ./tools/wattazoum.asc.gpg | gpg --batch --import
    - echo $ENCRYPTION_PASSWORD | gpg --passphrase-fd 0 --batch --yes -o - ./tools/wattazoum-pub.asc.gpg | gpg --batch --import
  image: zoomonit/greenpepper-builder

# Create the builder image
create_builder:
  stage: prepare
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker info
  script:
    - docker build -t zoomonit/greenpepper-builder tools/builder/
  image: docker:latest
  when: manual

# Verify branches
mvn_install:
  <<: *setup
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS install'
  except:
    - master
    - tags


# For `master` branch run `mvn deploy` automatically.
# Here you need to decide whether you want to use JDK7 or 8.
# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.
# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.
# See https://maven.apache.org/settings.html
mvn_deploy:
  <<: *setup
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS deploy -Prelease'
  only:
    - master
    - tags


mvn_release:
  <<: *setup
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS release:prepare'
  only:
    - master
  when: manual


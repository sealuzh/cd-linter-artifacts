# The GitHub repository is mirrored to GitLab.com, where continuous builds
# are performed for Linux and HTML5 platforms using GitLab CI.
#
# Download builds: https://bintray.com/calinou/godot/editor/_latestVersion#files
# GitLab repository: https://gitlab.com/Calinou/godot-builds
#
# This build script is licensed under CC0 1.0 Universal:
# https://creativecommons.org/publicdomain/zero/1.0/

stages:
  - build
  - package
  - deploy

variables:
  DEPLOY_SERVER: hugo.pro
  DEPLOY_USER: hugo
  DEPLOY_PATH: /var/www/godot.hugo.pro/builds

##
## Helpers
##

# Install dependencies and initialize stuff before every job,
# and set the build commit, date and version variables
before_script:
  - apt-get update -yqq
  - apt-get install -yqq openssh-client git cmake wget ruby rpl build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p "$HOME/.ssh/"
  - echo "$SSH_SERVER_HOSTKEYS" > "$HOME/.ssh/known_hosts"
  - if [ ! -d godot/ ]; then git clone --depth=1 https://github.com/godotengine/godot.git; fi
  - cd godot/
  - BUILD_DATE=$(date -I)
  - BUILD_COMMIT=$(git rev-parse --short HEAD)
  - BUILD_VERSION=$BUILD_DATE.$BUILD_COMMIT

# Deployment helper macro (used in all `deploy` stages)
.deploy: &deploy
  stage: deploy
  image: ubuntu:xenial
  script:
    - cd ../
    - mv artifacts/ "$BUILD_VERSION/"
    - scp -r "$BUILD_VERSION/" "$DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH/"

# Artifacts macro (used in all `build` and `package` stages)
.artifacts: &artifacts
  artifacts:
    when: on_success
    expire_in: 2d
    paths:
      - artifacts/

##
## Linux editor
##

# TODO: Build 32-bit Linux editor

build:linux_editor:
  stage: build
  image: ubuntu:trusty
  script:
    - patch --forward methods.py ../always_tty.patch
    - scons platform=x11 tools=yes target=release_debug progress=no -j$(nproc)
    - strip bin/godot.x11.opt.tools.64
    - mkdir -p ../artifacts/
    - mv bin/godot.x11.opt.tools.64 ../artifacts/
  <<: *artifacts

package:linux_editor:
  stage: package
  image: ubuntu:trusty
  dependencies:
    - build:linux_editor
  script:
    - mkdir -p appdir/usr/bin/ appdir/usr/share/icons/ ../artifacts/editor/
    - mv ../artifacts/godot.x11.opt.tools.64 appdir/usr/bin/godot
    - mv misc/dist/appimage/godot.desktop appdir/godot.desktop
    - mv icon.svg appdir/usr/share/icons/godot.svg
    - wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
    - chmod +x linuxdeployqt-continuous-x86_64.AppImage
    - ./linuxdeployqt-continuous-x86_64.AppImage --appimage-extract
    - ./squashfs-root/AppRun appdir/godot.desktop -appimage
    - mv Godot_Engine-x86_64.AppImage ../artifacts/editor/Godot-Linux-x86_64.AppImage
  <<: *artifacts

deploy:linux_editor:
  dependencies:
    - package:linux_editor
  <<: *deploy

##
## Linux export templates
##

# TODO: Build 32-bit Linux export templates. For now, the 64-bit templates
# are copied to 32-bit templates, to prevent errors from appearing in the
# export dialog.

build:linux_templates:
  stage: build
  image: ubuntu:trusty
  script:
    - patch --forward methods.py ../always_tty.patch
    - scons platform=x11 tools=no target=release_debug progress=no -j$(nproc)
    - scons platform=x11 tools=no target=release progress=no -j$(nproc)
    - strip bin/godot.*.64
    - mkdir -p ../artifacts/
    - mv bin/godot.*.64 ../artifacts/
  <<: *artifacts

package:linux_templates:
  stage: package
  image: ubuntu:trusty
  dependencies:
    - build:linux_templates
  script:
    - cd ../artifacts/
    - mkdir -p templates/
    - mv godot.x11.opt.debug.64 templates/linux_x11_64_debug
    - mv godot.x11.opt.64 templates/linux_x11_64_release
    - cp templates/linux_x11_64_debug templates/linux_x11_32_debug
    - cp templates/linux_x11_64_release templates/linux_x11_32_release
  <<: *artifacts

deploy:linux_templates:
  dependencies:
    - package:linux_templates
  <<: *deploy

##
## HTML5
##

build:html5:
  stage: build
  image: ubuntu:xenial
  script:
    - cd "$HOME"
    - wget https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz
    - tar xf emsdk-portable.tar.gz
    - cd emsdk-portable/; ./emsdk update; ./emsdk install latest; ./emsdk activate latest
    - source ./emsdk_env.sh
    - export EMSCRIPTEN_ROOT=$(em-config EMSCRIPTEN_ROOT)
    - cd "$CI_PROJECT_DIR/godot/"
    - patch --forward methods.py ../always_tty.patch
    - scons platform=javascript wasm=yes tools=no target=release_debug progress=no -j$(nproc)
    - scons platform=javascript wasm=yes tools=no target=release progress=no -j$(nproc)
    - scons platform=javascript wasm=no tools=no target=release_debug progress=no -j$(nproc)
    - scons platform=javascript wasm=no tools=no target=release progress=no -j$(nproc)
    - mkdir -p ../artifacts/
    - mv bin/godot.*.zip ../artifacts/
  <<: *artifacts

package:html5:
  stage: package
  image: ubuntu:xenial
  dependencies:
    - build:html5
  script:
    - cd ../artifacts/
    - mkdir templates/
    - mv godot.javascript.opt.debug.webassembly.zip templates/webassembly_debug.zip
    - mv godot.javascript.opt.webassembly.zip templates/webassembly_release.zip
    - mv godot.javascript.opt.debug.zip templates/javascript_debug.zip
    - mv godot.javascript.opt.zip templates/javascript_release.zip
  <<: *artifacts

deploy:html5:
  dependencies:
    - package:html5
  <<: *deploy


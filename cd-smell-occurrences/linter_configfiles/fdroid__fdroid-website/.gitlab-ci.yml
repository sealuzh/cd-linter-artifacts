image: ruby:2.3-jessie

stages:
 - deploy
 - production

variables:
  LC_ALL: C.UTF-8
  DEBIAN_FRONTEND: noninteractive
  OUT_DIR: build

.apt-template: &apt-template |
  echo Etc/UTC > /etc/timezone
  echo 'quiet "1";' \
       'APT::Install-Recommends "0";' \
       'APT::Install-Suggests "0";' \
       'APT::Acquire::Retries "20";' \
       'APT::Get::Assume-Yes "true";' \
       'Dpkg::Use-Pty "0";' \
      > /etc/apt/apt.conf.d/99gitlab
  apt-get update
  apt-get dist-upgrade


# Common steps required for each type of "Build" (f-droid.org, GitLab Pages, feature branches)
.setup_for_jekyll: &setup_for_jekyll |
  set -x
  set -e
  ruby -v
  sed -i '/jessie-updates/d' /etc/apt/sources.list
  apt-get install locales zlib1g-dev gettext po4a linkchecker bundler unzip python3 rsync python3-babel
  grep '^en_US.UTF-8 UTF-8' /etc/locale.gen || echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  locale-gen
  export LC_ALL=en_US.UTF-8
  ./tools/i18n.sh po2md
  bundle install --path vendor


#
# This is a manual task for building in preparation to deploy to
# https://f-droid.org. The intention is for it to be run locally using
# `gitlab-runner` each time a tag is found that is signed by a key in
# the whitelist keyring.  Invoke like so:
#
#  gitlab-runner exec docker f-droid.org --pre-build-script ./prepare-for-deploy.py \
#    --docker-volumes "/root/deploy-whitelist-keyring.gpg:/root/.gnupg/pubring.gpg:ro" \
#    --docker-volumes `pwd`/_site:/builds/output
#
# And when it is finished, you should have a directory in _site/build/
# which includes the entire static site ready to be deployed to
# https://f-droid.org.
#
f-droid.org:
  stage: production
  only:
    - tags@fdroid/fdroidserver
    - master@fdroid/fdroidserver
  when: manual
  cache:
    paths: [ vendor/ruby ]

  script:
   - '[ ! -d /builds/output ] && echo "ERROR: /builds/output is not mounted inside docker!" && exit 1'
   - *apt-template
   - *setup_for_jekyll
   - 'echo "url: https://f-droid.org" > userconfig.yml'
   - 'echo "baseurl: \"\"" >> userconfig.yml'
   - echo "Additional Jekyll config used for CI:" && cat userconfig.yml
   - bundle exec jekyll build -d $OUT_DIR --config _config.yml,userconfig.yml --trace
   - ./tools/prepare-multi-lang.sh $OUT_DIR
   - ./tools/deploy-external-assets.sh $OUT_DIR
   - rsync -ax --delete $OUT_DIR /builds/output/

pages:
  stage: deploy
  cache:
    paths:
      - vendor/ruby
  artifacts:
    paths:
      - public
    expire_in: 1w
    when: always
  script:
   # use the 'gitlab ci' subset of languages
   - sed -i 's,^languages:,ignored_languages:,' _config.yml
   - sed -i 's,^gitlab_ci_languages:,languages:,' _config.yml
   - *apt-template
   - *setup_for_jekyll
   - apt-get install python3-yaml
   - ./tools/check-format-strings.py
   - ./tools/check-page-links.py
   - ./tools/check-yaml-front-matter.py
   - ./tools/check-do-not-translate
   - ./tools/i18n.sh md2po
   - git checkout po/*.pot  # ignore the newly generated timestamp
   - git --no-pager diff --ignore-all-space --name-only po/
   # This is where GitLab pages will deploy to by default (e.g. "https://fdroid.gitlab.io/fdroid-website")
   # so we need to make sure that the Jekyll configuration understands this.
   - 'echo url: https://$CI_PROJECT_NAMESPACE.gitlab.io > userconfig.yml'
   - 'echo baseurl: /$CI_PROJECT_NAME >> userconfig.yml'
   - echo "Additional Jekyll config used for CI:" && cat userconfig.yml
   - bundle exec jekyll build -d public --config _config.yml,userconfig.yml --trace
   - ./tools/prepare-multi-lang.sh public --no-type-maps
   - mkdir linkchecker/
   - ln -s ../public linkchecker/$CI_PROJECT_NAME
   - ruby -run -e httpd linkchecker/ -p 4000 > /dev/null 2>&1 &
   - linkchecker http://localhost:4000/$CI_PROJECT_NAME --config=.linkcheckerrc
      --ignore-url ".*/packages/[b-z].*" --ignore-url "/F-Droid\.apk(\.asc)?$"


spellcheck:
  except:
    - tags@fdroid/fdroidserver
    - branches@fdroid/fdroidserver
  image: node
  stage: deploy
  allow_failure: true
  script:
    - git fetch https://gitlab.com/fdroid/fdroid-website.git
    - for f in `git diff --name-only --diff-filter=d FETCH_HEAD...HEAD`; do
          export CHANGED="$CHANGED `echo $f | grep '\.md$' || true`";
      done
    - if [ -z "`echo $CHANGED | sed 's,\s*,,g'`" ]; then
          echo "No markdown files changed"; exit 0;
      else
          echo "Spellchecking $CHANGED";
      fi
    - apt-get -qy update
    - apt-get -qy install --no-install-recommends --allow-unauthenticated python3 python3-requests
    - ./tools/fetch-spelling-words.py >> .spelling
    - npm i markdown-spellcheck -g
    - mdspell --report --en-gb
        --ignore-numbers --ignore-acronyms
        $CHANGED
        || true


# Download and verify that the FDroid.apk is signed by the right PGP
# key.  The only time that F-Droid's signed metadata does not verify
# the APK is the initial download and install of F-Droid itself.  An
# attacker could replace the FDroid.apk and PGP signature on the
# website. The gpg key model is to trust only the key that is included
# in this script, so there is a test to check that it is starting with
# an empty keyring.

check_fdroid_apk:
  stage: deploy
  only:
    - schedules
    - master@fdroid/fdroidserver
  image: alpine:3.5
  variables:
    apk: F-Droid.apk
    asc: F-Droid.apk.asc
    curl: "curl --silent --user-agent F-Droid --retry 20"
    fingerprint: 37D2C98789D8311948394E3E41E7044E1DBA2E89
  artifacts:
    name: "$apk-failed-${CI_JOB_ID}"
    paths:
      - $apk
      - $asc
    expire_in: 180 days
    when: on_failure
  script:
    - apk add --no-cache gnupg curl
    - "! (gpg --list-keys | grep pub)"
    - while ! gpg --keyserver pgp.mit.edu --recv-key $fingerprint; do sleep 10; done
    - gpg --list-key --fingerprint | tr -d '[:space:]' | grep $fingerprint
    - echo "${fingerprint}:6:" | gpg --import-ownertrust
    - $curl https://f-droid.org/$apk > $apk
    - $curl https://f-droid.org/$asc > $asc
    - sha256sum $apk
    - gpg --batch --trust-model always --verify $asc $apk

i18n_sync:
  stage: deploy
  image: debian:jessie-slim
  only:
    - tags
    - weblate
  script:
    - *apt-template
    - apt-get install bash gettext git grep po4a sed
    - for f in po/_posts.*.po; do msgmerge --no-wrap --sort-by-file  --add-location=file --update $f po/_posts.pot; done
    - for f in po/_docs.*.po; do msgmerge --no-wrap --sort-by-file  --add-location=file --update $f po/_docs.pot; done
    - git checkout po/*.pot  # ignore the newly generated timestamp
    - git add po/*.po
    - git config user.email "you@example.com"
    - git config user.name "DO NOT MERGE"
    - git commit po/*.po po/*.pot -m "DO NOT MERGE sort before test"
    - ./tools/i18n.sh md2po
    - for f in po/_posts.*.po; do msgmerge --no-wrap --sort-by-file  --add-location=file --update $f po/_posts.pot; done
    - for f in po/_docs.*.po; do msgmerge --no-wrap --sort-by-file  --add-location=file --update $f po/_docs.pot; done
    - git checkout po/*.pot  # ignore the newly generated timestamp
    - git --no-pager diff --exit-code --ignore-all-space -G'^msg' po/
        || (echo 'This test failed because the localization files were not synced.  To do that, run `./tools/i18n.sh md2po` then commit the changes in po/ and include them in this merge request.'; exit 1)
  allow_failure: true


stages:
  - build
  - deploy

build_macosx:
  stage: build
  tags:
    - macosx
    - build
  before_script:
    - brew update
    - brew upgrade
    - pip3 install dv
    - pip3 install numpy
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DENABLE_TCMALLOC=1 ..
    - make -j1
    - rm -Rf /usr/local/lib/libdvsdk.so* /usr/local/include/dv-sdk/ /usr/local/share/dv/
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp
    - if [[ "$CI_COMMIT_REF_NAME" != "master" ]] && [[ -z "$CI_COMMIT_TAG" ]] ; then exit 0; fi
    # Package artifact into dv-runtime-packaged-mac directory
    - cd ../build
    - ../packaging/macosx/package_deps.sh
    - mv dv-runtime-packaged-mac "dv-runtime-mac-$CI_COMMIT_REF_NAME"
    - echo "$CI_COMMIT_SHA" > "dv-runtime-mac-$CI_COMMIT_REF_NAME/git_commit"
    - zip -r "dv-runtime-mac-$CI_COMMIT_REF_NAME.zip" "dv-runtime-mac-$CI_COMMIT_REF_NAME"
    - aws s3 cp "dv-runtime-mac-$CI_COMMIT_REF_NAME.zip" "s3://release.inivation.com/runtime/dv-runtime-mac-$CI_COMMIT_REF_NAME.zip"

build_windows:
  stage: build
  tags:
    - windows
    - build
  variables:
    MSYSTEM: MINGW64
  before_script:
    - pacman -Syuu --noconfirm
      #- pip3 install dv
  script:
    - source /usr/bin/init-paths
    - mkdir build
    - cd build
    - cmake -G "MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=/mingw64 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - rm -Rf /mingw64/lib/libdvsdk.dll* /mingw64/include/dv-sdk/ /mingw64/share/dv/
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp
    - if [[ "$CI_COMMIT_REF_NAME" != "master" ]] && [[ -z "$CI_COMMIT_TAG" ]] ; then exit 0; fi
    # Package artifact into dv-runtime-packaged-win directory
    - cd ../build
    - python3 ../packaging/windows/package_deps.py
    - mv dv-runtime-packaged-win "dv-runtime-win-$CI_COMMIT_REF_NAME"
    - echo "$CI_COMMIT_SHA" > "dv-runtime-win-$CI_COMMIT_REF_NAME/git_commit"
    - zip -r "dv-runtime-win-$CI_COMMIT_REF_NAME.zip" "dv-runtime-win-$CI_COMMIT_REF_NAME"
    - aws s3 cp "dv-runtime-win-$CI_COMMIT_REF_NAME.zip" "s3://release.inivation.com/runtime/dv-runtime-win-$CI_COMMIT_REF_NAME.zip"

build_raspbian:
  stage: build
  tags:
    - raspbian
    - build
  before_script:
    - sudo apt-get -y update
    - sudo apt-get -y upgrade
    - sudo automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j2
    - sudo rm -Rf /usr/lib/libdvsdk.so* /usr/include/dv-sdk/ /usr/share/dv/
    - sudo make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp
    - if [[ "$CI_COMMIT_REF_NAME" != "master" ]] && [[ -z "$CI_COMMIT_TAG" ]] ; then exit 0; fi
    # Package artifact using CPack
    - cd ../build
    - sudo chmod 0666 install_manifest.txt
    - cpack -G DEB
    - mv "dv-runtime.armv7l.deb" "dv-runtime-raspbian-buster-$CI_COMMIT_REF_NAME.deb"
    - aws s3 cp "dv-runtime-raspbian-buster-$CI_COMMIT_REF_NAME.deb" "s3://release.inivation.com/runtime/raspbian/dv-runtime-raspbian-buster-$CI_COMMIT_REF_NAME.deb"
  only:
    - master
    - tags
    - web

build_ubuntu_1604:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:16.04
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    # google-perftools has no pkg-config support on Ubuntu 16.04, so TCMalloc is disabled.
    - cmake -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=0 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

build_ubuntu_1804:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:18.04
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

build_ubuntu_curr_gcc7:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:rolling
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

build_ubuntu_curr_gcc8:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:rolling
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

build_ubuntu_curr_gcc9:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:rolling
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

build_ubuntu_curr_clang7:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:rolling
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_C_COMPILER=clang-7 -DCMAKE_CXX_COMPILER=clang++-7 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

build_ubuntu_curr_clang8:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:rolling
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

build_ubuntu_curr_clang9:
  stage: build
  tags:
    - docker
  image: inivation/ubuntu:rolling
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - packaging/linux/build_libcaer.sh
    - automated_test/install_package.sh
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_C_COMPILER=clang-9 -DCMAKE_CXX_COMPILER=clang++-9 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_TCMALLOC=1 -DENABLE_VISUALIZER=1 ..
    - make -j1
    - make install
    - cd ../automated_test
    - python3 -u -m unittest runtime-test 2> tmp
    - cat tmp
    - rm tmp

release_ubuntu:
  stage: deploy
  tags:
    - docker
  image: inivation/ubuntu:rolling
  before_script:
    - gpg --pinentry-mode loopback --passphrase "${PPA_GPG_KEY_PASS}" --import "${PPA_GPG_KEY}"
    - echo -e "5\ny\n" | gpg --no-tty --command-fd 0 --edit-key "${PPA_GPG_KEY_ID}" trust quit
  script:
    - if [[ -z "${CI_COMMIT_TAG}" ]] ; then exit 0; fi
    - cd packaging/debian-source-package/
    - ./packageUbuntu.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}" --distro xenial --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}" --distro bionic --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}" --distro disco --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}" --distro eoan --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
  only:
    - tags
    - web

release_fedora:
  stage: deploy
  tags:
    - docker
  image: inivation/fedora:latest
  before_script:
    - mkdir -p ~/.config/
    - cp "${COPR_API_KEY}" ~/.config/copr
  script:
    - if [[ -z "${CI_COMMIT_TAG}" ]] ; then exit 0; fi
    - cd packaging/fedora-source-package/
    - ./packageFedora.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}"
    - copr-cli build --nowait inivation/inivation "dv-runtime-${CI_COMMIT_TAG}-0.fc31.src.rpm"
  only:
    - tags
    - web

release_gentoo_arch_brew:
  stage: deploy
  tags:
    - docker
  image: inivation/gentoo:latest
  before_script:
    - mkdir -p ~/.ssh/
    - cp "${GITCI_SSH_KEY}" ~/.ssh/id_ed25519
    - chmod 0600 ~/.ssh/id_ed25519
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
    - cp "${GITCI_SSH_CONF}" ~/.gitconfig
  script:
    - if [[ -z "${CI_COMMIT_TAG}" ]] ; then exit 0; fi
    - cd packaging/linux/
    # Gentoo release
    - ./gentoo-release.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}" --pkg-category dev-util
    # Arch release
    - ./arch-release.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}"
    # Brew release
    - ./brew-release.sh --pkg-name dv-runtime --pkg-version "${CI_COMMIT_TAG}"
  only:
    - tags
    - web


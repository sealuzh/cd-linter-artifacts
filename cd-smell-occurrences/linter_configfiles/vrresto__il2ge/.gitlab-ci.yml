# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: debian:buster-slim

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  APT_PACKAGES: gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils make cmake wine32 wine python swig cpp nsis
  CMAKE_OPTS: -DCMAKE_INSTALL_PREFIX=../install -Dplatform=mingw -Duse_plog=1 -Dno_tools=1 -Denable_configurable_atmosphere=1 -Denable_configurable_shadows=1

.debug_build:
  stage: build
  before_script:
     - dpkg --add-architecture i386
     - apt-get update
     - apt-get -y --no-install-recommends install $APT_PACKAGES
  script:
    - mkdir build
    - mkdir install
    - cd build
    - cmake $CMAKE_OPTS -Denable_debug=1 ..
    - make install
    - make installer
    - cp il2ge-installer.exe ..
  artifacts:
    name: "il2ge-debug_build_$CI_JOB_ID"
    paths:
      - il2ge-installer.exe

.map_viewer_build:
  stage: build
  before_script:
     - dpkg --add-architecture i386
     - apt-get update
     - apt-get -y --no-install-recommends install $APT_PACKAGES
  script:
    - mkdir build
    - mkdir install
    - cd build
    - cmake $CMAKE_OPTS -Denable_map_viewer=1 -Ddisable_il2ge=1 ..
    - make install
  artifacts:
    name: "il2ge_map_viewer-build_$CI_JOB_ID"
    paths:
      - install/map_viewer.exe

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
     - dpkg --add-architecture i386
     - apt-get update
     - apt-get -y --no-install-recommends install $APT_PACKAGES
  script:
    - mkdir build
    - mkdir install
    - cd build
    - cmake $CMAKE_OPTS ..
    - make install
    - make installer
    - cp il2ge-installer.exe ..
  artifacts:
    name: "il2ge-build_$CI_JOB_ID"
    paths:
      - il2ge-installer.exe
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh


# This file is a template, and might need editing before it works on your project.
image: golang:1.10.4

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/tabi/tabi-backend
  SSH_USER: cideploy
  SSH_HOST: tabiapp.eu
  

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.

stages:
    - test
    - build
    - deploy

format:
    stage: test
    before_script:
      - apt-get update -y && apt-get install -y jq curl git build-essential
      - download_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | jq -r '.assets[] | select(.name | contains("'"$(uname | tr '[:upper:]' '[:lower:]')"'_amd64")) | .browser_download_url')
      - curl -o /usr/local/bin/swagger -L'#' "$download_url"
      - chmod +x /usr/local/bin/swagger
      - go get github.com/rakyll/statik
      - mkdir -p $GOPATH/src/gitlab.com/$CI_PROJECT_NAMESPACE
      - ln -svf $CI_PROJECT_DIR $GOPATH/src/gitlab.com/$CI_PROJECT_NAMESPACE
      - cd $GOPATH/src/$REPO_NAME
      - statik -f -src=public -dest .
      - swagger generate spec -o public/swagger.json -b $REPO_NAME/cmd/tabi-backend
      - statik -f -src=public -dest .
    script:
      - ls -lh
      - pwd
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)
      - go test $(go list ./... | grep -v /vendor/) -v -race -coverprofile .testCoverage.txt

compile:
    stage: build
    before_script:
      - mkdir -p $GOPATH/src/gitlab.com/$CI_PROJECT_NAMESPACE
      - ln -svf $CI_PROJECT_DIR $GOPATH/src/gitlab.com/$CI_PROJECT_NAMESPACE
      - apt-get update -y && apt-get install -y jq curl git build-essential
      - download_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | jq -r '.assets[] | select(.name | contains("'"$(uname | tr '[:upper:]' '[:lower:]')"'_amd64")) | .browser_download_url')
      - curl -o /usr/local/bin/swagger -L'#' "$download_url"
      - chmod +x /usr/local/bin/swagger
      - go get github.com/rakyll/statik
      - cd $GOPATH/src/$REPO_NAME
      - statik -f -src=public -dest .
      - swagger generate spec -o public/swagger.json -b $REPO_NAME/cmd/tabi-backend
      - statik -f -src=public -dest .
    script:
      - chmod +x go-executable-build.bash
      - ./go-executable-build.bash $REPO_NAME/cmd/tabi-backend
      - ./go-executable-build.bash $REPO_NAME/cmd/tabi-util
      - ls -lh
    artifacts:
      name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}"
      paths:
        - tabi-*

docker:
    image: docker:latest
    variables:
      IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    services:
      - docker:dind
    stage: build
    before_script:
      - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    script:
      - docker build -t $IMAGE_TAG .
      - docker push $IMAGE_TAG

deploy_review:
  image: alpine
  stage: deploy
  before_script: &sshbeforescript
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'which ssh-agent || (apk add --no-cache openssh-client rsync)'
    
    - apk add --no-cache rsync
    
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)
    
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Replace environment variables in docker-compose.yml file
    - sed -i "s|CI_REGISTRY_IMAGE|${CI_REGISTRY_IMAGE}|g;s|CI_COMMIT_REF_NAME|${CI_COMMIT_REF_NAME}|g" deployci/docker-compose.yml
    - sed -i "s|CI_COMMIT_REF_NAME|${CI_COMMIT_REF_NAME}|g" deployci/docker-compose.yml
    - sed -i "s|VIRTUAL_HOST|VIRTUAL_HOST=${CI_ENVIRONMENT_SLUG}\.${SSH_HOST}|g" deployci/docker-compose.yml
    - sed -i "s|LETSENCRYPT_HOST|LETSENCRYPT_HOST=${CI_ENVIRONMENT_SLUG}\.${SSH_HOST}|g" deployci/docker-compose.yml
    - sed -i "s|LETSENCRYPT_EMAIL|LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}|g" deployci/docker-compose.yml
    # Transfer deployci with docker-compose.yml folder to SSH_HOST
    - rsync -av --delete deployci/ $SSH_USER@$SSH_HOST:~/builds/$CI_ENVIRONMENT_SLUG
    - > 
        ssh -T $SSH_USER@$SSH_HOST 
        "cd ~/builds/$CI_ENVIRONMENT_SLUG &&
        docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY &&
        docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME &&
        docker-compose up -d"
    - echo "Deploy a review app at ${VIRTUAL_HOST}"
  environment:
    name: staging/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.$SSH_HOST
  only:
  # Only run on these protected branches:
    - /^review-.*$/
stop_review:
  image: alpine
  stage: deploy
  variables:
    GIT_STRATEGY: none
  before_script: *sshbeforescript
  script:
    - echo "Remove review app"
    - > 
        ssh -T $SSH_USER@$SSH_HOST 
        "cd ~/builds/$CI_ENVIRONMENT_SLUG &&
        docker-compose rm -s -f &&
        cd .. && rm -rf $CI_ENVIRONMENT_SLUG"
  when: manual
  environment:
    name: staging/$CI_COMMIT_REF_NAME
    action: stop
  only:
    # Only run on these protected branches:
    - /^review-.*$/


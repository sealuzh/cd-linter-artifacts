build:
  image: docker:latest
  services:
  - docker:dind
  stage: build
  variables:
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
  script:
    # install depends
    - apk add curl jq

    # enable experimental buildx features
    - export DOCKER_BUILDKIT=1
    - export DOCKER_CLI_EXPERIMENTAL=enabled

    # Download latest buildx bin from github
    - mkdir -p ~/.docker/cli-plugins/
    - BUILDX_LATEST_BIN_URI=$(curl -s -L https://github.com/docker/buildx/releases/latest | grep 'linux-amd64' | grep 'href' | sed 's/.*href="/https:\/\/github.com/g; s/amd64".*/amd64/g')
    - curl -s -L ${BUILDX_LATEST_BIN_URI} -o ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx

    # Get and run the latest docker/binfmt tag to use its qemu parts
    - BINFMT_IMAGE_TAG=$(curl -s https://registry.hub.docker.com/v2/repositories/docker/binfmt/tags | jq '.results | sort_by(.last_updated)[-1].name' -r)
    - docker run -d --rm --privileged docker/binfmt:${BINFMT_IMAGE_TAG}

    # create the multibuilder
    - docker buildx create --name multibuilder
    - docker buildx use multibuilder

    # login to a registry
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}

    # build the containers and push them to the registry then display the images
    - docker buildx build --platform linux/amd64,linux/arm64,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 -t docker.io/aapjeisbaas/hello-container:${CI_APPLICATION_TAG} . --push
    - docker buildx imagetools inspect docker.io/aapjeisbaas/hello-container:${CI_APPLICATION_TAG}

container_scanning:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
  services:
    - docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull docker.io/aapjeisbaas/hello-container:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml docker.io/aapjeisbaas/hello-container:${CI_APPLICATION_TAG} || true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

push_container:
  image: docker:latest
  services:
  - docker:dind
  stage: deploy
  variables:
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
  script:
    # push to docker hub
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
    - docker pull docker.io/aapjeisbaas/hello-container:${CI_APPLICATION_TAG}
    - docker tag docker.io/aapjeisbaas/hello-container:${CI_APPLICATION_TAG} aapjeisbaas/hello-container:latest
    - docker push aapjeisbaas/hello-container:latest


---
image: remmina/ubuntu:18.04

stages:
  - build
# - flatpak_build

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  BUILD_FOLDER: build
  DEB_PPA: "ppa:remmina-ppa-team/remmina-next"
  FREERDP_DAILY_PPA: "ppa:remmina-ppa-team/freerdp-daily"
  DOCKER_IMAGE: "ubuntu:bionic"
  CMAKE_BUILD_OPTIONS: "-DCMAKE_BUILD_TYPE=Release -DWITH_APPINDICATOR=on"
  FLATPAK_ARCH: x86_64

before_script:
  - mkdir -p .flatpak-builder/cache

# TODO: We should create a job for each distro and test the compile correcthly
#       but _only_ if triggered at certain conditions (releases, tag, etc)
#       http://docs.gitlab.com/ee/ci/yaml/README.html#only-and-except-simplified
# This is an example for Ubuntu
ubuntu:devel:
  # image: ubuntu:devel
  # stage: cross_environment
  stage: build
  before_script:
    - apt-get update -qq

  script:
    - mkdir $BUILD_FOLDER
    - cmake -B$BUILD_FOLDER -H. $CMAKE_BUILD_OPTIONS
    - make VERBOSE=1 -C $BUILD_FOLDER
  only:
    refs:
      - master
      - web
      - schedules
      - merge_requests

appimage:build:
  # image: ubuntu:devel
  # stage: cross_environment
  image: remmina/ubuntu:16.04
  stage: build
  before_script:
    - apt-get update -qq

  script:
    - mkdir $BUILD_FOLDER
    - cmake -B$BUILD_FOLDER -H. $CMAKE_BUILD_OPTIONS -DCMAKE_INSTALL_PREFIX=/usr
    - make VERBOSE=1 -C $BUILD_FOLDER
    - make VERBOSE=1 -C $BUILD_FOLDER install DESTDIR=AppDir
    - wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage --directory-prefix=$BUILD_FOLDER/
    - wget https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage --directory-prefix=$BUILD_FOLDER/
    - chmod +x $BUILD_FOLDER/*AppImage
    - export OUTPUT="Remmina-x86_64.AppImage"
    - cd $BUILD_FOLDER && ./linuxdeploy-x86_64.AppImage --appimage-extract
    - mv squashfs-root/ linuxdeploy/
    - export UPDATE_INFORMATION="gh-releases-zsync|AppImage|appimaged|continuous|appimaged*$ARCH*.AppImage.zsync"
    - export SIGN=1
    - export VERBOSE=1
    - linuxdeploy/AppRun --appdir AppDir --output appimage

  artifacts:
    name: "Remmina-x86_64.AppImage"
    paths:
      - $BUILD_FOLDER/Remmina-x86_64.AppImage
  only:
    refs:
      - web

flatpak:test:
  image: remmina/ubuntu:18.04
  stage: build
  variables:
    BUNDLE: "remmina-dev.flatpak"
    FLATPAK_PPA: "ppa:alexlarsson/flatpak"
    FLATHUB_REPO: "https://flathub.org/repo/flathub.flatpakrepo"
  before_script:
    - apt-get update -qq
    - add-apt-repository $FLATPAK_PPA -y
    - apt-get update -qq
    - apt-get install -y -qq flatpak-builder flatpak build-essential git-core
    - flatpak --user remote-add --if-not-exists flathub $FLATHUB_REPO
  script:
    - /bin/sh -xe ./flatpak/flatpak-build.sh
  artifacts:
    paths:
      - flatpak/${BUNDLE}
    expire_in: 10 days
  cache:
    paths:
      - flatpak/.flatpak-builder/cache
  only:
    refs:
      - master
      - web
      - schedules

snap:build:
  image: ubuntudesktop/gnome-3-28-1804
  stage: build
  script:
    - export LC_ALL=C.UTF-8
    - export LANG=C.UTF-8
    - export SNAP_ARCH=amd64
    - export SNAPCRAFT_BUILD_INFO=1
    - apt-get -y update
    - snapcraft --destructive-mode
    - |
       if [ "$CI_COMMIT_REF_NAME" = "master" ]; then
         echo $SNAPCRAFT_LOGIN | snapcraft login --with -
         snapcraft push remmina*.snap --release edge
         snapcraft logout
       fi
  allow_failure: false
  artifacts:
    paths: ['./*.snap']
    expire_in: 10 days
  only:
    refs:
      - master
      - web
      - schedules


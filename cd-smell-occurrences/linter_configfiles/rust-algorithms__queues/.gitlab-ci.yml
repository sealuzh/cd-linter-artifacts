# Unofficial language image. Look for the different tagged releases at:
# https://hub.docker.com/r/scorpil/rust/tags/
image: "scorpil/rust:stable"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-service
#services:
#  - mysql:latest
#  - redis:latest
#  - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
#before_script:
#- apt-get update -yqq
#- apt-get install -yqq --no-install-recommends build-essential

# Build first
build:cargo:
  stage: build
  script:
  - rustc --version && cargo --version      # Print version info for debugging
  - cargo build --release                   # Build for release

# Use cargo to test the project
test:cargo:
  stage: test
  script:
  - rustc --version && cargo --version      # Print version info for debugging
  - cargo test --verbose --jobs 1 --release # Don't paralize to make errors more readable
#  - cargo run

# Deploy release version executable
#deploy:cargo:
#  stage: deploy
#  script:
#  - cargo build --release
#  - mkdir .public
#  - cp target/release/bh .public
#  - mv .public public
#  artifacts:
#    paths:
#    - public

# Generate pages from docs
pages:
  script:
  - cargo doc
  - mkdir .public
  - cp -a target/doc/. .public
  - cp index.html .public/
  - mv .public public
  artifacts:
    paths:
    - public
  only:
  - master


stages:
  - build
  - build_rpm
  - deploy

# variables:
variables:
  #
  # Repository to deploy to here e.g:
  DEPLOY_REPO_URL: "https://repo.deployctl.com"
  #
  # deploy repository deployctl
  DEPLOY_REPO_PATH: "/"
  DEPLOY_DOMAIN_APP: "gioxapp.com"
  #
  # Prodduction deployment url and https
  DEPLOY_DOMAIN: "fake-arch.tools.odagrun.com"
  DEPLOY_CONFIG_HTTPS: "True"
  #
   #Deployment locations
  DEPLOY_RELEASE_PATH: '["distro/","srpm/","lib/"]'
  #
  # Extra links for release page, besides the <*.url> files
  DEPLOY_hrefs: '[ "repository": "$DEPLOY_REPO_URL"]'


build_base:
  image: gioxa/base-image-crossimagebuilder
  stage: build
  script:
    - ./autogen.sh
    - ./configure
    - make >/dev/null
    - make check
    - cat tests/test.sh.log
    - make distcheck >/dev/null
    - cp *.tar.gz distro
    - mkdir lib
    - cp -L src/.libs/libfakearch.so lib/libfakearch.so
    - mkdir public
  artifacts:
    paths:
      - 'distro/*.tar.gz'
      - 'distro/*.spec'
      - 'lib/libfakearch.so'
      - 'public'
  tags:
    - odagrun

make_rpm:
  variables:
    GIT_STRATEGY: none
  stage: build_rpm
  image: gioxa/base-image-crossimagebuilder
  script:
    - mkdir -pv ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
    - cp distro/*.tar.gz  ~/rpmbuild/SOURCES
    - cp distro/fake_arch.spec ~/rpmbuild/SPECS
    - rpmbuild -ba ~/rpmbuild/SPECS/fake_arch.spec
    - mkdir ./{rpm,srpm}
    - cp ~/rpmbuild/RPMS/x86_64/* rpm
    - cp ~/rpmbuild/SRPMS/*.rpm srpm
  artifacts:
    paths:
    - rpm
    - srpm
  tags:
  - odagrun

# ***************************************
# Deploy with deployctl to repo
# ***************************************
deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - deployctl release
    - deployctl repo_add
  tags:
    - deployctl-gioxapp.com
  only:
    - tags
  except:
    - branches
  environment:
    name: production
    url: $DEPLOY_DOMAIN


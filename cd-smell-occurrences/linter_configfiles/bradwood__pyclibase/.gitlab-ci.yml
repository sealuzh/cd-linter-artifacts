image: python:3.6.5

variables:
  GIT_STRATEGY: fetch
  PIPENV_VENV_IN_PROJECT: "true" # makes pipenv use ~/.venv
  PIPENV_CACHE_DIR: "$CI_PROJECT_DIR/.pipenvcache"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pipcache"
stages:
  - Unit tests & Coverage
  - Coverage Reporting
  - Linting
  - Package & Release

cache:
  untracked: true
  paths:
  - "$CI_PROJECT_DIR/.pipcache"
  - "$CI_PROJECT_DIR/.pipenvcache"
  - "$CI_PROJECT_DIR/.venv"

before_script:
  - python -V    # Print out python version for debugging
  - pip install pipenv
  - pipenv install --dev

# after_script:
#   - ls -la $CI_PROJECT_DIR/.pipcache
#   - ls -la $CI_PROJECT_DIR/.pipenvcache
#   - ls -la $CI_PROJECT_DIR/.venv

unit testing and coverage:
  stage: Unit tests & Coverage
  script:
  - pipenv run py.test --cov=cli -vv tests -s --cov-report html --cov-report term
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/' # regex used to pull out the coverage percentate in gitlab.
  artifacts:
      paths:
          - htmlcov
      expire_in: 1 day
  except:
    - master

pages:
  stage: Coverage Reporting
  script:
    - mkdir -p public/coverage
    - cp -fr htmlcov/* public/coverage/
  dependencies:
    - unit testing and coverage
  artifacts:
    paths:
    - public
  except:
    - master


linting:
  stage: Linting
  script:
  - pipenv run pylint cli tests
  - pipenv run pycodestyle cli tests
  - pipenv run pydocstyle cli tests
  except:
    - master

package and release:
  stage: Package & Release
  artifacts:
    paths:
      - dist
  script:
  - pipenv run python setup.py bdist_wheel
  only:
    - master


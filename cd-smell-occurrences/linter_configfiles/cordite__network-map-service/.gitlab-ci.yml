stages:
 - build
 - snapshot_release
 - release

variables:

before_script:
  - mkdir -p ~/.m2/repository
  - cp maven/settings.xml ~/.m2/settings.xml

# For more information on Maven see
#  https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Maven.gitlab-ci.yml

# For more information on Docker see
#  https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Docker.gitlab-ci.yml

branch:maven:
#  image: dazraf/build-tools:latest
  stage: build
  variables:
    MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--threads 1C --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  script:
    - mvn $MAVEN_CLI_OPTS clean license:check package
    - cat target/site/jacoco/index.html
  except:
    - master
    - tags
  tags:
    - build-tools

build:maven:
#  image: dazraf/build-tools:latest
  stage: build
  variables:
    MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--threads 1C --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  script:
    - mvn $MAVEN_CLI_OPTS clean license:check package
    - cat target/site/jacoco/index.html
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  only:
    - master
    - tags
  tags:
    - build-tools
  artifacts:
    paths:
      - target/network-map-service.jar
      - target/site/jacoco/index.html
      - target/network-map-service/


#code_quality:
#  stage: build
#  image: docker:stable
#  variables:
#    DOCKER_DRIVER: overlay2
#  allow_failure: true
#  services:
#    - docker:stable-dind
#  script:
#    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#    - docker run
#        --env SOURCE_CODE="$PWD"
#        --volume "$PWD":/code
#        --volume /var/run/docker.sock:/var/run/docker.sock
#        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
#  artifacts:
#    paths: [gl-code-quality-report.json]
#  tags:
#    - docker

# package:docker:
#  stage: package
#  image: docker:latest
#  variables:
#    DOCKER_DRIVER: overlay2
#  services:
#    - docker:stable-dind
#  script:
#    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
#    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} .
#    - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
#  tags:
#    - docker
#  only:
#    - master # should be on all branches to stop master failing
#    - tags

snapshot_release:maven:
  stage: snapshot_release
  image: dazraf/build-tools:latest
  script:
    - rm -rf ~/.gnupg
    - gpg --version
    - gpg --import --batch --passphrase "$GPG_PASSPHRASE" <<< "$GPG_KEY"
    - gpg --import-ownertrust <<< "$GPG_OWNER_TRUST"
    - mvn $MAVEN_CLI_OPTS dokka:javadocJar deploy -DskipTests -P release
  only:
    - master
  tags:
    - build-tools

release:maven:
  stage: release
  image: dazraf/build-tools:latest
  variables:
    NMS_VERSION: $CI_COMMIT_REF_NAME
  when: manual
  script:
    - rm -rf ~/.gnupg
    - gpg --version
    - gpg --import --batch --passphrase "$GPG_PASSPHRASE" <<< "$GPG_KEY"
    - gpg --import-ownertrust <<< "$GPG_OWNER_TRUST"
    - mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=${NMS_VERSION:1}
    - mvn $MAVEN_CLI_OPTS dokka:javadocJar deploy -DskipTests -P release
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
  tags:
    - build-tools

release:docker:
  stage: release
#  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}:latest # backward compatible
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:edge ; docker push ${CI_REGISTRY_IMAGE}:edge
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG:-edge} ; docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG:-edge}
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:latest ; docker push ${CI_REGISTRY_IMAGE}:latest; fi
    - docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} cordite/network-map:edge ; docker push cordite/network-map:edge
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} cordite/network-map:${CI_COMMIT_TAG:-edge} ; docker push cordite/network-map:${CI_COMMIT_TAG:-edge}
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} cordite/network-map:latest ; docker push cordite/network-map:latest; fi
  tags:
    - build-tools
  only:
    - master
    - tags

# container_scanning:
#   image: docker:stable
#   stage: release
#   variables:
#     CI_APPLICATION_REPOSITORY: ${CI_REGISTRY_IMAGE}
#     CI_APPLICATION_TAG: ${CI_PIPELINE_ID}
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - docker run -d --name db arminc/clair-db:latest
#     - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
#     - apk add -U wget ca-certificates
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
#     - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
#     - mv clair-scanner_linux_amd64 clair-scanner
#     - chmod +x clair-scanner
#     - touch clair-whitelist.yml
#     - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
#     - retries=0
#     - echo "Waiting for clair daemon to start"
#     - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
#     - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
#   artifacts:
#     paths: [gl-container-scanning-report.json]
#   tags:
#     - docker
#   only:
#     - master
#     - tags

# fails due to use of npm
#sast:
#  stage: test
#  image: jimador/docker-jdk-8-maven-node
#  variables:
#    DOCKER_DRIVER: overlay2
#  allow_failure: true
#  services:
#    - docker:stable-dind
#  script:
#    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#    - docker run
#        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
#        --volume "$PWD:/code"
#        --volume /var/run/docker.sock:/var/run/docker.sock
#        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
#  artifacts:
#    paths: [gl-sast-report.json]
#  tags:
#    - docker
#  only:
#    - 73-test-for-nms
#    - master
#    - tags

# dast:
#   stage: release
#   image: registry.gitlab.com/gitlab-org/security-products/zaproxy
#   variables:
#     website: "https://network-map-edge.cordite.foundation/"
#   allow_failure: true
#   script:
#     - mkdir -p /zap/wrk/
#     - /zap/zap-baseline.py -J gl-dast-report.json -t $website || true
#     - cp /zap/wrk/gl-dast-report.json .
#   artifacts:
#     reports:
#       dast: gl-dast-report.json
#   tags:
#     - docker
#   only:
#     - master
#     - tags

# dependency_scanning:
#   stage: release
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#     - docker run
#         --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
#         --volume "$PWD:/code"
#         --volume /var/run/docker.sock:/var/run/docker.sock
#         "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
#   artifacts:
#     reports:
#       dependency_scanning: gl-dependency-scanning-report.json
#   tags:
#     - docker
#   only:
#     - master
#     - tags




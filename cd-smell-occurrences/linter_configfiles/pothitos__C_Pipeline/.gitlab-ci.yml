# Using the official GCC Docker image as default
image: gcc

# Columns of the pipeline
stages:
  - static analysis
  - build
  - test

# Static code analysis job via Clang Static Analyzer
static analysis:
  stage: static analysis
  image: rsmmr/clang
  script:
    - scan-build --status-bugs gcc operations.c calculator.c

# Compilation job via GCC
build:
  stage: build
  script:
    # gcc compilation arguments enable code coverage output
    - gcc -fprofile-arcs -ftest-coverage -fPIC operations.c calculator.c -o calculator
  # Pass below artifacts to the next jobs
  artifacts:
    paths:
      - calculator
      - calculator.gcno
      - operations.gcno

# Unit testing via MinUnit framework
unit tests:
  stage: test
  script:
    - gcc operations.c unit_tests/minunit.c -o minunit_tests
    - ./minunit_tests

# Module testing and code coverage reporting
module tests:
  stage: test
  before_script:
    - apt update && apt -y install gcovr
  script:
    - test $(./calculator 1 + 1) = 2
    - test $(./calculator 100 - 10) = 90
    - test $(./calculator 25 \* 5) = 125
    - (! ./calculator 30 / 5) # Should fail as division is unsupported
    - gcovr -r .
  coverage: /^TOTAL.*\s+(\d+\%)$/


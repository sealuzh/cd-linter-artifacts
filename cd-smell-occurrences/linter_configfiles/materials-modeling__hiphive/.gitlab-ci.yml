image: registry.gitlab.com/materials-modeling/hiphive:latest

build_linux:
  stage: build
  tags:
    - linux
  script:
    - INSTDIR=$PWD/opt/lib/python
    - mkdir -p $INSTDIR
    - export PYTHONPATH=$INSTDIR:$PYTHONPATH
    - python3 ./setup.py install --home=$PWD/opt
  artifacts:
    paths:
      - opt/
    expire_in: 14 days


run_tests:
  stage: test
  dependencies:
    - build_linux
  tags:
    - linux
  script:
    - export PATH=${PATH}:${HOME}/.local/bin
    # Python path used throughout
    - INSTDIR=$PWD/opt/lib/python
    - export PYTHONPATH=$INSTDIR:$PYTHONPATH
    # run tests via coverage
    - coverage run tests/main.py
    - coverage report -m --omit=hiphive/calculators/numba_calc.py
    # generate html version of detailed coverage report
    - coverage html --omit=hiphive/calculators/numba_calc.py
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    paths:
      - htmlcov
    expire_in: 14 days


test_benchmarks_tutorial:
  stage: test
  only:
    - schedules
  tags:
    - linux
  dependencies:
    - build_linux
  script:
    - export PATH=${PATH}:${HOME}/.local/bin
    - INSTDIR=$PWD/opt/lib/python
    - export PYTHONPATH=$INSTDIR:$PYTHONPATH
    - pwd=`pwd`
    - |
      for dir in `find examples/ -name '*.py' | xargs dirname | sort -uk1 | grep -v compare_fcs_phono3py` ; do
        echo "dir= $dir"
        cd $pwd
        cd $dir
        for file in `ls *.py | sort -gk1` ; do
          echo "Running $file -- `date`"
          python3 $file
          echo "Finished running $file -- `date`"
        done
        echo
      done


run_flake8:
  stage: test
  tags:
    - linux
  script:
    - export PATH=${PATH}:${HOME}/.local/bin
    - flake8 doc/ examples/ hiphive/ tests/
  allow_failure: true


pages:
  stage: deploy
  dependencies:
    - build_linux
    - run_tests
  script:
    # prepare homepage
    - mkdir -p public/dev
    - mv doc/google*.html public/
    # letsencrypt setup
    - fname=`awk '{split($0, s, "."); print s[1]}' doc/letsencrypt-setup.html`
    - mkdir -p public/.well-known/acme-challenge/
    - mv doc/letsencrypt-setup.html public/.well-known/acme-challenge/$fname
    # prepare
    - INSTDIR=$PWD/opt/lib/python
    - export PYTHONPATH=$INSTDIR:$PYTHONPATH
    # --------------------------
    # STABLE VERSION
    - tag=$(git tag | tail -1)
    - echo "tag= $tag"
    - git checkout $tag
    # code coverage report
    - cp -dr htmlcov/ public/coverage/
    # build user guide
    - sphinx-build doc/source/ public/
    # make tests and examples downloadable
    - cd examples
    - find tutorial/ -print | zip ../public/tutorial.zip -@
    - find advanced_topics/ -print | zip ../public/advanced_topics.zip -@
    - cd ..
    - find tests/ -print | zip public/tests.zip tests/structure_databases/*.db -@
    # --------------------------
    # DEVELOPMENT VERSION
    - git checkout master
    - tag=$(git describe | tail -1)
    - echo "tag= $tag"
    # code coverage report
    - cp -dr htmlcov/ public/dev/coverage/
    # build user guide
    - sed -i "s/version = ''/version = '$tag'/" doc/source/conf.py
    - cat doc/source/conf.py
    - sphinx-build doc/source/ public/dev/
    # make tests and examples downloadable
    - cd examples
    - find tutorial/ -print | zip ../public/dev/tutorial.zip -@
    - find advanced_topics/ -print | zip ../public/dev/advanced_topics.zip -@
    - cd ..
    - find tests/ -print | zip public/dev/tests.zip tests/structure_databases/*.db -@
    # --------------------------
    # clean up
    - ls -l public/.well-known/acme-challenge/
    - ls -l public/
    - chmod go-rwX -R public/
  artifacts:
    paths:
      - public
  only:
    - master


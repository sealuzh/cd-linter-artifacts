stages:
  - build
  - import
  - test
  - release

variables:
  TESTING_IMAGE: $CI_REGISTRY_IMAGE:testing-$CI_COMMIT_SHA
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -t $TESTING_IMAGE -f docker/Dockerfile .
    - docker push $TESTING_IMAGE
    
import:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: import
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
  script:
    - python3 -c "import multiphenics"
  artifacts:
    paths:
      - jitfailure*
    when: on_failure
    
flake8:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import multiphenics"
  script:
    - find . -type f -name "__init__.py" -exec bash -c 'mv "$0" "`echo \"$0\" | sed s/__init__/___init___/`"' {} \;
    - sed -i "s|__init__.py|___init___.py|g" setup.cfg
    - pytest --flake8 -m flake8 -vv --html=pytest_flake8.html --self-contained-html
    - find . -type f -name "___init___.py" -exec bash -c 'mv "$0" "`echo \"$0\" | sed s/___init___/__init__/`"' {} \;
    - sed -i "s|___init___.py|__init__.py|g" setup.cfg
  artifacts:
    paths:
      - pytest_flake8.html
    when: on_failure
    
tutorials_serial:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import multiphenics"
  script:
    - pytest -n auto -vv --html=pytest_tutorials_serial.html --self-contained-html tutorials
  artifacts:
    paths:
      - pytest_tutorials_serial.html
    when: on_failure
    
tests_serial:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import multiphenics"
  script:
    - pytest -n auto -vv --html=pytest_tests_serial.html --self-contained-html tests
  artifacts:
    paths:
      - pytest_tests_serial.html
    when: on_failure
    
.tutorials_parallel:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import multiphenics"
  script:
    - mpirun -n 2 pytest -vv --html=pytest_tutorials_parallel.html --self-contained-html tutorials
  artifacts:
    paths:
      - pytest_tutorials_parallel.html
    when: on_failure
    
.tests_parallel:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import multiphenics"
  script:
    - mpirun -n 2 pytest -vv --html=pytest_tests_parallel.html --self-contained-html tests
  artifacts:
    paths:
      - pytest_tests_parallel.html
    when: on_failure

release:
  image: docker:latest
  services:
    - docker:dind
  stage: release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $TESTING_IMAGE
    - docker tag $TESTING_IMAGE $RELEASE_IMAGE
    - docker push $RELEASE_IMAGE
  only:
    - master


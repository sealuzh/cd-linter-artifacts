stages:
  - Update
  - Install
  - Core
  - Test
  - Finish

# Select what we should cache between builds
cache:
  paths:
  - full.php
  - raw.php
#  - vendor/

# Install PHP extensions
# - docker-php-ext-install mbstring mcrypt pdo_pgsql curl json intl gd xml zip bz2 opcache
# Install and run Composer
# - curl -sS https://getcomposer.org/installer | php
# - php composer.phar install

# Bring in any services we need http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# See http://docs.gitlab.com/ce/ci/services/README.html for examples.
# services:
#   - mysql:5.7

# Set any variables we need
# variables:
  # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
#   MYSQL_DATABASE: mysql_database
#   MYSQL_ROOT_PASSWORD: mysql_strong_password

# Run our tests
# If Xdebug was installed you can generate a coverage report and see code coverage metrics.
APT-Update:
  image: php:7.1.1
  stage: Update
  script:
  - apt-get update -yqq
  
APT-Install:
  image: php:7.1.1
  stage: Install
  script:
  - apt-get update -yqq
  - apt-get install -yqq git libmcrypt-dev libpq-dev libcurl4-gnutls-dev libicu-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev
  
Ender:
  stage: Finish
  script:
  - apt-get update -yqq
  
Git:
  stage: Core
  script:
  - git clone https://gitlab.com/McNase/MinecraftOfflineUUID.git

variables:
  JEKYLL_ENV: production

test:
  image: ruby:2.3
  stage: Test
  script:
  - bundle install
  - bundle exec jekyll build -d test
  artifacts:
    paths:
    - test
  except:
  - master

pages:
  image: ruby:2.3
  stage: Core
  script:
  - bundle install
  - bundle exec jekyll build -d public
  artifacts:
    paths:
    - public
  only:
  - master



# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: greyltc/archlinux:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - postgres:latest

# variables:
#   POSTGRES_DB: database_name

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - ~/.cache/pip/
  - /.yarn_cache/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - pacman -Sy
  - pacman -S --noconfirm python nodejs npm yarn python-pip chromium
  - yarn --pure-lockfile --cache-folder .yarn-cache
  - pip install -r requirements/test.txt
  - python manage.py makemigrations
  - python manage.py migrate
  - yarn run build

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command

test:
  script:
  - pytest --cov-report term | tee python_cov
  - yarn run unit | tee js_cov
  - python get_coverage.py
  coverage: '/cov: ([0-9]+.??[0-9]+%)/'


# If you have questions or requests contact Valentin Boettcher <hiro@protagon.space> (Gitlab: vale9811)

image: "registry.gitlab.com/vale9811/sherpa-docker-build/slim"

variables:
  DOCKER_DRIVER: overlay2
  CONFIGURE_FLAGS: --enable-analysis --enable-analysis  --with-libzip=install
  MAKE_FLAGS: -j4

.build_template: &build
  stage: build
  before_script:
    # set up ccache
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export CCACHE_COMPILERCHECK=content
    # enable gold linker
    - ln -sf ld.gold /usr/bin/ld

  # accelerate git-clone by making it shallow
  variables:
    GIT_DEPTH: "3"
  # cache ccache
  cache:
    paths:
      - ccache/

#
# Build
#

# default build with gcc
build:
  <<: *build
  script:
    - autoreconf -i
    - mkdir -p build
    - cd build
    - ../configure CC="ccache gcc" CXX="ccache g++" --prefix="$PWD/install" $CONFIGURE_FLAGS
    - make $MAKE_FLAGS
    - make install
  # store what's required to run the tests
  artifacts:
    expire_in: 2 days
    paths:
      - build/install
      - Examples/CI/

# build with clang and -Werror
build-clang-strict:
  <<: *build
  script:
    - autoreconf -i
    - mkdir -p build-clang-strict
    - cd build-clang-strict
    # enable strict compilation
    - cxxflags="-Werror"
    - ../configure CC="ccache clang" CXX="ccache clang++" CXXFLAGS="${cxxflags}" --prefix="$PWD/install" $CONFIGURE_FLAGS
    - make $MAKE_FLAGS
    - make install
  # store what's required to run the tests
  artifacts:
    expire_in: 2 days
    paths:
      - build-clang-strict/install
      - Examples/CI/

build-manual:
  stage: build
  image: registry.gitlab.com/vale9811/sherpa-docker-build
  script:
    - autoreconf -i
    - mkdir -p build
    - cd Manual
    - pip3 install -r requirements.txt
    - cd ../build
    - ../configure --enable-manual --with-libzip=install
    - cd Manual
    - make
  artifacts:
    expire_in: 2 days
    paths:
      - build/Manual
  only:
    changes:
      - Manual/**/*

#
# Test
#

# define test runs as single jobs; this is less dynamic then just cycling
# through all sub-directories of Examples/CI, but it makes sure that all test
# jobs will be run simultaneously; at least we use anchors and map merging to
# inherit parameters set in .test_template

.test_template: &test
  stage: test
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none  # we only need the artifacts from the build

test-LO_Z:
  <<: *test
  dependencies:
    - build
  script:
    - mkdir test-LO_Z
    - cd test-LO_Z
    - ../build/install/bin/Sherpa -f ../Examples/CI/LO_Z/Sherpa.yaml

test-clang-strict-LO_Z:
  <<: *test
  dependencies:
    - build-clang-strict
  script:
    - mkdir test-clang-strict-LO_Z
    - cd test-clang-strict-LO_Z
    - ../build-clang-strict/install/bin/Sherpa -f ../Examples/CI/LO_Z/Sherpa.yaml

#
# Deploy
#


# Rebuild the Website to include this tag in the changelogs.
trigger_pages:
  stage: deploy
  variables:
    GIT_STRATEGY: none  # we only need the artifacts from the build
  only:
    - tags
  script:
    - "curl -X POST -F token=$PAGES_TRIGGER_TOKEN -F ref=master https://gitlab.com/api/v4/projects/8892644/trigger/pipeline"
  dependencies:

# build the dist-tarball
dist:
  stage: deploy
  only:
    - tags

  image: registry.gitlab.com/vale9811/sherpa-docker-build
  script:
    - autoreconf -i
    - cd Manual
    - pip3 install -r requirements.txt
    - cd ..
    - mkdir -p build
    - cd build
    - ../configure $CONFIGURE_FLAGS --enable-manual # build the manual into the dist tarball
    - make dist

    # upload to gitlab releases
    - "REL=$(git describe --abbrev=0 --tags)"
    - "TARBALL=$(ls *.tar.gz | cut -d ' ' -f1)"
    - 'URL=$(curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --form "file=@./$TARBALL" https://gitlab.com/api/v4/projects/13884060/uploads | grep -o -P "\"url\":\"(.*?)\"" | sed "s/\"//g" | sed "s/url://")' # TODO: use regex
    - "echo $URL"
    - 'curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --data name="$TARBALL" --data url="https://gitlab.com/vale9811/sherpa$URL" "https://gitlab.com/api/v4/projects/13884060/releases/$REL/assets/links"'
    - 'curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --data name="Manual" --data url="https://sherpa-team.gitlab.io/sherpa/$REL/" "https://gitlab.com/api/v4/projects/13884060/releases/$REL/assets/links"'

# Build Manual
pages:
  image: alpine
  stage: deploy
  script:
    - apk --no-cache add py3-pip python-dev
    - apk --no-cache add make git
    - git fetch --tags
    - cd Manual
    - pip3 install -r requirements.txt
    - pip3 install git+https://github.com/vale981/sphinx-versions.git
    - cd ..
    - sphinx-versioning  build -w "^master" Manual/source/ build/html -- -b singlehtml
    - mv build/html public
  artifacts:
    paths:
    - public
  only:
    changes:
      - Manual/**/*
    refs:
      - master
      - tags


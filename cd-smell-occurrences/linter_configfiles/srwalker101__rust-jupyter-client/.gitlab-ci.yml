# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

stages:
  - pre
  - test

cache:
  paths:
    - target

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
#services:
#  - mysql:latest
#  - redis:latest
#  - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.

formatting:
  stage: pre
  before_script:
  - rustup component add rustfmt-preview
  script:
  - rustc --version && cargo --version
  - bash ./bin/check-formatting


# Use cargo to test the project
test:stable:
  stage: test
  before_script:
  - apt-get update -yqq
  - apt-get install -yqq --no-install-recommends libzmq3-dev

  script:
  - rustc --version && cargo --version      # Print version info for debugging
  - bash ./bin/test

test:nightly:
  stage: test
  before_script:
  - apt-get update -yqq
  - apt-get install -yqq --no-install-recommends libzmq3-dev
  - rustup install nightly

  script:
  - rustc --version && cargo --version      # Print version info for debugging
  - RUST_VERSION=nightly bash ./bin/test

pages:
  stage: pre
  before_script:
  - apt-get update -yqq
  - apt-get install -yqq --no-install-recommends libzmq3-dev

  script:
    - cargo doc --no-deps
    - mv target/doc public
    - echo '<meta http-equiv="refresh" content=0;url=jupyter_client/index.html>' > public/index.html

  # only:
  #   - dev

  artifacts:
    paths:
      - public


